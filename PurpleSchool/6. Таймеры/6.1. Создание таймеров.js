/*
Основы Таймеров
- Таймеры - это часть API, доступная в браузерах и Node.js.
- Они тесно связаны с Event Loop, ключевым механизмом асинхронности в JavaScript.
- Назначение таймеров - отложить выполнение действий.

Создание и использование setTimeout
+ Функция setTimeout позволяет отложить выполнение кода на определенный промежуток времени.
+ Принимает три аргумента:
  1. Функция для выполнения.
  2. Время задержки в миллисекундах.
  3. Дополнительные аргументы для функции.
+ Пример: setTimeout(() => console.log("Бум"), 2000);
  - выводит "Бум" через 2 секунды.

Работа с дополнительными аргументами
+ Дополнительные аргументы передаются в функцию, вызываемую через setTimeout.
+ Пример: setTimeout((msg) => console.log(msg), 1000, "Бэш");
  - выводит "Бэш" через 1 секунду.

Отмена Таймера
- Таймер можно отменить с помощью clearTimeout, если он еще не сработал.
- clearTimeout требует ID таймера, возвращаемого setTimeout.
- Пример отмены: let timerId = setTimeout(() => console.log("Бум"), 1000); clearTimeout(timerId);

Понимание Event Loop через Таймеры
- JavaScript не "ждет" выполнения таймера, продолжая исполнение другого кода.
- Пример показывает, как сначала выполнится код вне таймера, а затем — отложенные действия.

Важность Таймеров
- Таймеры важны для планирования задач и асинхронных операций.
- Они позволяют откладывать выполнение кода, не останавливая основной поток исполнения.
*/
