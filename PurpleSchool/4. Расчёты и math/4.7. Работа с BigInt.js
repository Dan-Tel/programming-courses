/*
Проблема с большими числами в JavaScript
- В JavaScript есть предел для безопасного использования чисел: Number.MAX_SAFE_INTEGER и Number.MIN_SAFE_INTEGER.
- Эти пределы соответствуют (2^{53} - 1) и (-2^{53} + 1).
- Числа за пределами этих значений могут вести к некорректным результатам из-за особенностей хранения и операций с ними.

Введение в BigInt
- Для работы с числами, превышающими безопасный предел, в JavaScript предусмотрен тип BigInt.
- BigInt позволяет работать с очень большими целыми числами.

Создание BigInt
- Чтобы создать BigInt, можно добавить n к литералу числа или использовать функцию BigInt() с передачей числа или строки.

Особенности работы с BigInt
- BigInt и обычные числовые типы не могут быть смешаны в операциях без явного приведения типов.
- С BigInt доступны стандартные арифметические операции, такие как сложение, вычитание, умножение и деление.
- Операции сравнения также поддерживают BigInt.
- При делении BigInt отбрасывает дробную часть, результатом является целое число.

Применение BigInt
- Используется для точной работы с большими числами, например, в финансовых расчётах, для идентификаторов в базах данных.
- BigInt не подходит для работы с числами с плавающей точкой.
*/
