/*
Введение
- Лекция посвящена пониманию цепочек прототипов в JavaScript, ключевому аспекту наследования и объектно-ориентированного программирования.

Создание объекта с помощью функции-конструктора
- Создание пустого объекта с помощью оператора new и функции-конструктора.
- Пример с книгой "Lord of the Rings", где используется конструктор для инициализации свойств author и title.
 
Прототипы и двусторонняя связь
- Описание связи между объектом и его прототипом, а также конструктором.
- Объект наследует методы и свойства от своего прототипа, создавая цепочку прототипов.

Шаги создания объекта
1. Создание пустого объекта.
2. Вызов конструктора, инициализация свойств.
3. Связывание с прототипом, позволяющее использовать его методы и свойства.
4. Возвращение созданного объекта с присвоенным прототипом.

Prototype Chaining
- Объекты могут наследовать свойства/методы через цепочку прототипов.
- Prototype chaining иллюстрирует поиск свойств/методов в прототипах, если они отсутствуют в самом объекте.

Пример с использованием hasOwnProperty
- Использование hasOwnProperty для проверки наличия свойства в объекте.
- Принцип поиска метода среди прототипов ("цепочка прототипов") аналогичен.
*/
