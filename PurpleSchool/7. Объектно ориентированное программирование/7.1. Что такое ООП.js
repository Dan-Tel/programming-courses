/*
Общее понятие ООП
+ ООП
  - парадигма программирования, основанная на понятиях объектов из реального мира.
+ Другие парадигмы включают, например, функциональное программирование.
+ В ООП мы работаем с объектами (например, стол, стул, телефон), описывая их свойства и методы.
+ Все приложение строится из объектов, которые взаимодействуют друг с другом.
+ JavaScript является мультипарадигменным языком, в то время как, например, C# ориентирован исключительно на ООП.

Важность ООП
- ООП активно используется во многих современных языковых фреймворках, таких как Angular (фронтенд) и Node.js (бэкенд).
- Понимание ООП и его принципов важно для проектирования приложений, так как это упрощает структурирование больших приложений, делает код легче поддерживаемым.

Четыре основных принципа ООП
1. Абстракция
  - выделение важных свойств объекта, игнорирование незначительных деталей.
2. Инкапсуляция
  - скрытие деталей реализации объекта, предоставление к нему доступа только через определенный интерфейс.
3. Наследование
  - создание новых классов на основе существующих, что позволяет повторно использовать и расширять существующий код.
4. Полиморфизм
  - способность объектов с одинаковым интерфейсом предоставлять различную реализацию.

Примеры применения ООП
- Пример интернет-магазина: пользователи, корзины покупателей, товары разных категорий.
- Принципы ООП помогают структурировать данные и логику приложения, облегчая управление и модификацию кода.

Реализация ООП в JavaScript
- ООП в JavaScript отличается от традиционного ООП в других языках.
- Используется прототипное наследование, но с ES6 введены классы.
- Важно понимать, как эти концепции применяются в JavaScript для эффективной работы.
*/
