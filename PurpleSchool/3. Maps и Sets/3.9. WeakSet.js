/*
Основные пункты:
1. Введение в WeakSet:
  - WeakSet похож на WeakMap, но предназначен для хранения объектов, а не пар ключ-значение.
  - Примитивные типы данных (например, числа) в WeakSet добавить нельзя.

2. Базовые операции с WeakSet:
  - Создание WeakSet осуществляется через конструктор: let set = new WeakSet().
  - В WeakSet можно добавлять только объекты. Пример: создаем объекты const a1 и const b2, после чего можем добавить их в WeakSet.
  - Доступные операции: добавление (add), удаление (delete), проверка наличия элемента (has).  
  - Получить размер WeakSet (size) или перебрать его элементы напрямую нельзя.

3. Особенности хранения и автоматическое удаление:
  - WeakSet автоматически удаляет объекты,a на которые больше нет ссылок. Это полезно для оптимизации памяти и предотвращения утечек памяти.
  - Пример: если объект a становится равным null, то после работы сборщика мусора он будет автоматически удален из WeakSet.

4. Практическое применение WeakSet:
  - WeakSet может использоваться для хранения кэша объектов без необходимости вручную управлять его очисткой.
  - В повседневной разработке ситуации, требующие использования WeakSet, встречаются редко, но знать о его существовании и особенностях полезно.
*/
