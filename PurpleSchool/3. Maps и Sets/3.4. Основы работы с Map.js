/*
Создание и работа с Map
1. Создание Map:
  - Используйте new Map() для создания новой Map, например let weatherMap = new Map().
2. Добавление элементов:
  - Добавляйте элементы через метод set, указывая ключ и значение. Например, weatherMap.set('London', 10) для добавления температуры в Лондоне.
3. Получение элементов:
  - Получайте добавленные элементы через get, передавая ключ. Например, weatherMap.get('Moscow') вернет температуру в Москве.
4. Проверка наличия ключа:
  - Проверьте наличие ключа через has. weatherMap.has('Moscow') вернет true, если в Map есть Москва.
5. Удаление элементов:
  - Удаляйте элементы через delete, указывая ключ. Например, weatherMap.delete('London') удаляет Лондон из Map.
6. Очистка Map:
  - Очистите всю Map одновременно через clear(), например, weatherMap.clear().
7. Размер Map:
  - Получите размер Map с помощью свойства size, например, weatherMap.size вернет количество элементов в Map.

Особенности ключей Map
1. Разнообразие ключей:
  - В качестве ключей можно использовать различные типы данных: строки, числа, булевы значения и даже объекты и массивы.
2. Уникальность ключей:
  - При попытке добавить элемент с уже существующим ключом, новое значение заменит старое.
3. Использование нестроковых и непримитивных ключей:
  - Помните, что Map использует адрес в памяти для идентификации непримитивных ключей, таких как объекты или массивы. Получение значения по такому ключу требует использования идентичной с точки зрения ссылки переменной.

Применение Map в JavaScript
- Map предлагает гибкость для работы с парами ключ-значение, где ключи могут быть разных типов данных.
- При использовании непримитивных ключей важно помнить о специфике сравнения по ссылке на объект в памяти.
*/
